#!/usr/bin/perl

# aws-ec2-build-instance
#
# Launches instance from the AMI
# Requires configured aws tool
#
# Version 0.0.9

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);
use MIME::Base64;

use Helpers::Logger;
use Helpers::Misc;
use Helpers::AWS;

use constant EXIT_SUCCESS => 0;
use constant EXIT_FAILURE => 1;

use constant ERR_MISSIGN_CONFIG         => qq(Failed to read configuration file %s);
use constant ERR_CONFIG_MISSING_NODE    => qq(Configuration file %s is missing node %s);
use constant ERR_CONFIG_NOT_JSON        => qq(Configuration file %s content does not look like a valid JSON);
use constant ERR_MISSING_AMI_ID         => qq(Must provide a valid AMI id);
use constant ERR_MISSING_HOSTNAME       => qq(Must provide a valid hostname);
use constant ERR_MISSING_INSTANCE_TYPE  => qq(Must provide a valid instance type);
use constant ERR_MISSING_REGION         => qq(Must provide a valid AWS EC2 region);
use constant ERR_MISSING_SEC_GROUP      => qq(Must provide a valid AWS EC2 security group);
use constant ERR_INVALID_AWS_EC2_AZ     => qq(Requested AWS EC2 availability zone is not valid);
use constant ERR_CMD_NO_INSTANCES       => qq(Failed to get a current list of instances);
use constant ERR_EC2_AWS_FAILURE        => qq(Failed to properly communicated with AWS to create an instance);
use constant ERR_EC2_AWS_NO_JSON        => qq(AWS API responded with something other than a JSON);
use constant ERR_EC2_NO_INSTANCE_IDS    => qq(Can't find instance ids in data returned by AWS API);
use constant ERR_EC2_TOO_MANY_INSTANCES => qq(AWS EC2 returned too many instances - only 1 was expected);
use constant ERR_HOSTNAME_EXISTS        => qq(Selected hostname is already assigned to a non-terminated instance);
use constant ERR_INVALID_ROOT_DISK_SIZE => qq(AWS EC2 instance disk size must be a positive integer);

our $logger       = undef;
our $cleanup_vars = undef;
our $cleanup_obj  =  { files => [], directories => [] };

{

  my $opt = {
                'TOOL_NAME'               => qq(aws-build-ec2-instance),
                'TOOL_DESC'               => qq(Builds and lauches EC2 instance from AMI),
                'TOOL_VER_MAJOR'          => 0,
                'TOOL_VER_MINOR'          => 0,
                'TOOL_VER_PATCH'          => 9,
                'config'                  => undef,
                'ami_id'                  => undef,
                'instance_type'           => undef,
                'region'                  => undef,
                'security_group'          => undef,
                'hostname'                => undef,
                'sec_fencer_build'        => undef,
                'root-disk-size'          => undef,
                'tmpdir'                  => qq(/tmp),
                'zone'                    => undef,
                'stdout_json'             => 0,
                'verbose'                 => 0,
                'help'                    => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};
  $opt->{'tmpdir'} = sprintf("/tmp/%s", $opt->{'TOOL_NAME'});
  $opt->{'default_config'} = sprintf("%s/.config/config-%s.json", Helpers::Misc::get_users_home_dir(), $opt->{'TOOL_NAME'});

  my $ret = GetOptions(   "config=s"          => \$opt->{'config'},
                          "ami-id=s"          => \$opt->{'ami_id'},
                          "region=s"          => \$opt->{'region'},
                          'security-group=s'  => \$opt->{'security_group'},
                          "instance-type=s"   => \$opt->{'instance_type'},
                          "root-disk-size=s"  => \$opt->{'root-disk-size'},
                          "hostname=s"        => \$opt->{'hostname'},
                          "sec-fencer-build"  => \$opt->{'sec_fencer_build'},
                          "stdout-json"       => \$opt->{'stdout_json'},
                          "zone=s"            => \$opt->{'zone'},
                          "tmpdir=s"          => \$opt->{'tmpdir'},
                          "verbose"           => \$opt->{'verbose'},
                          "help"              => \$opt->{'help'},
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);
  $opt->{'config'} = $opt->{'default_config'} if (Helpers::Misc::isEmpty($opt->{'config'}));

  my $loggerConfig =  {
                          'ident' => $opt->{'TOOL_NAME'},
                          'loggers' => {
                                          'syslog' => { 'facility' => qq(user) },
                                          'stdout' => 0,
                                          'stderr' => 1,
                                       },
                      };

  $loggerConfig->{'loggers'}->{'stdout_json'} = 1 if ($opt->{'stdout_json'});
  $logger = Helpers::Logger->new($loggerConfig);

  my $config_json_ptr = undef;
  ($ret, $config_json_ptr) = Helpers::Misc::readFile($opt->{'config'});
  if (!$ret) # opportunistically read configuration file - if default, it is not an error if it is missing, if specified, it is.
    {
      Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSIGN_CONFIG, $opt->{'config'}) if ($opt->{'config'} ne $opt->{'default_config'});
      $config_json_ptr = undef;
    }

  my $config = undef;
  if (defined $config_json_ptr)
    {
      my $this_config = undef;
      ($ret, $this_config) = Helpers::Misc::fromJSON($$config_json_ptr);
      Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_CONFIG_NOT_JSON, $opt->{'config'}) if (!$ret);

      foreach my $f (qw/aws-ec2-builder/)
        {
          Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_CONFIG_MISSING_NODE, $opt->{'config'}, $f) if (Helpers::Misc::isEmpty($this_config->{$f}));
        }
      $config = $this_config->{'aws-ec2-builder'};
    }

  foreach my $f (qw/tmpdir ami_id hostname instance_type security_group sec_fencer_build region zone root-disk-size/)
    {
      $config->{$f} = $opt->{$f} if (!Helpers::Misc::isEmpty($opt->{$f}));
    }

  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSING_AMI_ID)         if (!Helpers::AWS::isValidAMI($config->{'ami_id'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSING_SEC_GROUP)      if (!Helpers::AWS::isValidSecurityGroup($opt->{'security_group'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSING_HOSTNAME)       if (!Helpers::AWS::isValidHostname($config->{'hostname'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSING_INSTANCE_TYPE)  if (!Helpers::AWS::isValidInstanceType($config->{'instance_type'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MISSING_REGION)         if (!Helpers::AWS::isValidAWSRegion($config->{'region'}));

  if (!Helpers::Misc::isEmpty($config->{'zone'}))
    {
      Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_INVALID_AWS_EC2_AZ) if (!Helpers::AWS::isValidAWSAz($config->{'zone'}));
    }

  if (!Helpers::Misc::isEmpty($config->{'root-disk-size'}))
    {
      Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_INVALID_ROOT_DISK_SIZE) if (!Helpers::Misc::isPositiveInteger($config->{'root-disk-size'}));

      # create temporary directory as we need to move mappings there

      my $this_err = undef;
      ($ret, $this_err) = Helpers::Misc::createDirectory( $config->{'tmpdir'},
                                          {
                                            'logger'              => $logger,
                                            'mode'                => 0700,
                                            'exists-skip-create'  => 1,
                                            'exists-fails'        => 1,
                                            'creating-message'    => sprintf("Temporary directory %s does not exist, creating.", $config->{'tmpdir'}),
                                          });
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Failed to create a temporary directory %s : %s", $config->{'tmpdir'}, $this_err);
      push @{$cleanup_obj->{'directories'}}, $config->{'tmpdir'};


#      my $fname =
    }

  $logger->log_no_stdout("Getting information about the running instances...") if ($opt->{'verbose'});
  my $instance_list_json_ptr = undef;
  my $cmd = qq(aws-list-ec2-instances |);
  ($ret, $instance_list_json_ptr) = Helpers::Misc::readFile($cmd);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_CMD_NO_INSTANCES) if (!$ret);

  my $instance_list = undef;
  ($ret, $instance_list) = Helpers::Misc::fromJSON($$instance_list_json_ptr);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_EC2_AWS_NO_JSON) if (!$ret);

  foreach my $this_instance (@{$instance_list})
    {
      next if (Helpers::Misc::isEmpty($this_instance->{'RunState'}));
      next if (Helpers::Misc::isEmpty($this_instance->{'ServerName'}));
      Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_HOSTNAME_EXISTS) if ($this_instance->{'ServerName'} eq $opt->{'hostname'} && $this_instance->{'RunState'} ne qq(terminated));
    }

  my $user_data = {
                    'sec_fencer'   => 1,
                    'provisioning' => 1,
                    'hostname'     => $config->{'hostname'},
                  };

  my $user_data_json = undef;
  ($ret, $user_data_json) = Helpers::Misc::toJSON($user_data);
  my $user_data_base64 = MIME::Base64::encode_base64($user_data_json);
  $user_data_base64 =~ s/\n//g;
  chomp $user_data_base64;

  my $tags_str = sprintf("{Key=Name,Value=%s}", $opt->{'hostname'});

  $cmd  = qq(aws ec2 run-instances);
  $cmd .= qq( --count 1);
  $cmd .= qq( --region ) . $config->{'region'};
  $cmd .= qq( --security-group-ids ) . $config->{'security_group'};
  $cmd .= qq( --ebs-optimized);
  $cmd .= qq( --image-id ) . $config->{'ami_id'};
  $cmd .= qq( --tag-specifications 'ResourceType=instance,Tags=[) . $tags_str . qq(]');
  $cmd .= qq( --instance-type ) . $config->{'instance_type'};
  $cmd .= qq( --placement AvailabilityZone=) . $config->{'zone'} if (!Helpers::Misc::isEmpty($config->{'zone'}));
  $cmd .= qq( --user-data $user_data_base64 |) if ($config->{'sec_fencer_build'});

  $logger->log_no_stdout( "Building and running a new instance with type %s with hostname %s using command `%s`",
                $config->{'instance_type'},
                $opt->{'hostname'},
                $cmd) if ($opt->{'verbose'});

  my $response_ptr = undef;
  ($ret, $response_ptr) = Helpers::Misc::readFile($cmd);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_EC2_AWS_FAILURE . $response_ptr) if (!$ret);

  my $instance_obj = undef;
  ($ret, $instance_obj) = Helpers::Misc::fromJSON($$response_ptr);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_EC2_AWS_NO_JSON) if (!$ret);

  my $launched_instance = undef;
  my $count = 0;
  foreach my $this_instance (@{$instance_obj->{'Instances'}})
    {
      $launched_instance->{'InstanceId'} = $this_instance->{'InstanceId'};
      $launched_instance->{'AZ'}         = $this_instance->{'Placement'}->{'AvailabilityZone'};
      $launched_instance->{'Region'}     = Helpers::AWS::azToRegion($this_instance->{'Placement'}->{'AvailabilityZone'});
      $count++;
    }

  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_EC2_TOO_MANY_INSTANCES) if ($count != 1);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_EC2_NO_INSTANCE_IDS)    if (!$launched_instance->{'InstanceId'});

  my $return_obj = undef;
  my $result_json = $launched_instance;
  if ($opt->{'stdout_json'})
    {
      $return_obj =   {
                        'status' => "200",
                        'object' => $launched_instance,
                      };
    }
  ($ret, $result_json) = Helpers::Misc::toJSON($return_obj);
  if ($opt->{'stdout_json'}) { print STDOUT $result_json; } else { $logger->log_no_stdout($result_json); }

  exit(EXIT_SUCCESS);

}

exit(EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      --config=<config.json>          Read base configuration from <config.json>\n");
  printf("                                      Default: %s\n", $opt->{'config'});
  printf("      --ami-id=<id>                   Launch from AMI <id>\n");
  printf("                                      Default: %s\n", $opt->{'ami_id'});
  printf("      --hostname=<name>               Set instance hostname to <hostname>\n");
  printf("                                      Default: %s\n", $opt->{'hostname'});
  printf("      --instance-type=<type>          Launch instance type <type>\n");
  printf("                                      Default: %s\n", $opt->{'instance_type'});
  printf("      --security-group=<group-id>     Launch instance with security group <group-id>\n");
  printf("                                      Default: %s\n", $opt->{'security_group'});
  printf("      --zone=<zone>                   Launch instance in availability zone <zone>\n");
  printf("                                      Default: let AWS EC2 decide\n");
  printf("      --sec-fencer-build              This is a build for an instance using Security Fencer\n");
  printf("                                      Default: No\n");
  printf("      --root-disk-size=<size>         Provision root disk of size <size>\n");
  printf("                                      Default: Use AMI disk size\n");
  printf("      --tmpdir=<tmp>                  Use directory <tmp> for temporary storage\n");
  printf("                                      Default: %s\n", $opt->{'tmpdir'});
  printf("      --stdout-json                   Make stdout status messageing to be a control JSON\n");
  printf("                                      Default: No\n");
  printf("      --verbose                       Increase verbosity of the log messages\n");
  printf("                                      Default: No\n");
  printf("      --help                          This help\n\n");
  printf("This tool relies on pre-configured aws utility\n\n");

  exit(EXIT_SUCCESS);
}

END {
  my $opt = { 'logger' => $logger, 'log-success' => 1, 'log-error' => 1 };

  sleep($cleanup_vars->{'sleep-at-exit'}) if (defined $cleanup_vars->{'sleep-at-exit'} && $cleanup_vars->{'sleep-at-exit'} != 0);

  my ($ret, $errmsg) = Helpers::Misc::deleteFileList(      $cleanup_obj->{'files'},       $opt );
  ($ret, $errmsg)    = Helpers::Misc::deleteDirectoryList( $cleanup_obj->{'directories'}, $opt ) if ($ret);
  $logger->log_no_stdout("Some of the files or directories were not deleted") if (!$ret);

  unlink($cleanup_vars->{'remove_pidfile'}) if (defined $cleanup_vars->{'remove_pidfile'});

}
