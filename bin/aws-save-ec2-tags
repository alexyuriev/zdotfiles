#!/usr/bin/perl

# aws-save-ec2-tags
#
# Saves AWS EC2 tags
# Requires configured aws tool
#
# Version 0.0.7

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);
use Helpers::AWS;
use Helpers::Logger;
use Helpers::Misc;

use constant EXIT_SUCCESS => 0;
use constant EXIT_FAILURE => 1;

use constant ERR_MSG_MISSING_CONFIG             => qq(Unable to read configuratin file %s : %s);
use constant ERR_MSG_EMPTY_CONFIG               => qq(Configuration file %s seems to be empty);
use constant ERR_MSG_CONFIG_NOT_JSON            => qq(Configuration file %s does not appear to be a JSON: %s);
use constant ERR_MSG_CONFIG_MISSING_NODE        => qq(Configuration file %s is missing a node %s);
use constant ERR_MSG_CONFIG_MISSING_FIELD       => qq(Configuration file %s is missing field %s in node %s);
use constant ERR_MSG_FAILED_TO_CREATE_PID_FILE  => qq(Failed to create PID file %s);
use constant ERR_MSG_SLEEP_AT_EXIT_POSITIVE     => qq(Sleep-at-exit parameter must be a positive integer);
use constant ERR_MSG_MISSING_INSTANCE_ID        => qq(AWS instance ID is missing);
use constant ERR_MSG_INVALID_REGION             => qq(Must provide a valid AWS EC2 region);
use constant ERR_MSG_MISSING_AWS_EC2_REGION     => qq(AWS EC2 region name is missing);
use constant ERR_MSG_INVALID_INSTANCE_ID        => qq(Must provide a valid AWS EC2 instance id);
use constant ERR_MSG_MISSING_TAG                => qq(Need provide a name of the tag to set);
use constant ERR_MSG_MISSING_OUTPUT             => qq(Need a name of the file to write tag values);
use constant ERR_MSG_MODE_NON_OCTAL             => qq(Permissions mode needs to be a octal four or five digit string starting with '0');
use constant ERR_MSG_SET_TAG_FAILED             => qq(Failed to set a tag %s to value %s on AWS EC2 instance %s in region %s);
use constant ERR_MSG_MODE_CONFLICT              => qq(Cannot use --tag-control-file together with --mode, --tag, --output-file or --overwrite);

use constant AWS_SAVE_EC2_TAGS_DEFAULT_FILE_MODE => "0600";
use constant AWS_SAVE_EC2_TAGS_DEFAULT_OVERWRITE => 0;

our $logger = undef;
our $cleanup_vars = undef;

{

  my $opt = {
                'TOOL_NAME'       => qq(aws-save-ec2-tags),
                'TOOL_DESC'       => qq(Saves tags from AWS EC2 instance to a file),
                'TOOL_VER_MAJOR'  => 0,
                'TOOL_VER_MINOR'  => 0,
                'TOOL_VER_PATCH'  => 7,

                'tag'               => undef,
                'overwrite'         => undef,
                'mode'              => undef,
                'output-file'       => undef,
                'instance-id'       => undef,
                'region'            => undef,
                'tag-control-file'  => undef,

                '_need-config'            => 0,
                'config'                  => undef,
                'single-instance'         => 0,
                'sleep-at-exit'           => 0,
                'pid-file'                => undef,
                'log-tag'                 => undef,
                'verbose'                 => 1,
                'randomize-sleep-at-exit' => 0,
                'help'                    => 0
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};
  $opt->{'default_config'} = sprintf("%s/.config/config-%s.json", Helpers::Misc::get_users_home_dir(), $opt->{'TOOL_NAME'});


  my $ret = GetOptions( "tag=s"                   => \$opt->{'tag'},
                        "region=s"                => \$opt->{'region'},
                        "instance-id=s"           => \$opt->{'instance-id'},
                        "mode=s"                  => \$opt->{'mode'},
                        "output-file=s"           => \$opt->{'output-file'},
                        "tag-control-file=s"      => \$opt->{'tag-control-file'},
                        "overwrite"               => \$opt->{'overwrite'},

                        "log-tag=s"               => \$opt->{'log-tag'},
                        "pid-file=s"              => \$opt->{'pid-file'},
                        "verbose"                 => \$opt->{'verbose'},
                        "sleep-at-exit=s"         => \$opt->{'sleep-at-exit'},
                        "randomize-sleep-at-exit" => \$opt->{'randomize-sleep-at-exit'},
                        "help"                    => \$opt->{'help'}
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);

  my $loggerConfig =  {
                        'ident' => $opt->{'TOOL_NAME'},
                        'loggers' => { 'stdout' => 0, 'stderr' => 1, 'syslog' => { 'facility' => 'user' } },
                      };
  $loggerConfig->{'ident'} = $opt->{'log-tag'} if (!Helpers::Misc::isEmpty($opt->{'log-tag'}));
  $logger = Helpers::Logger->new($loggerConfig);

  # handle pid file

  if (!Helpers::Misc::isEmpty($opt->{'pid-file'}))
    {
      $logger->log("PID file is %s", $opt->{'pid-file'});
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "File %s exists and only one %s can run at a time", $opt->{'pid-file'}, $opt->{'TOOL_NAME'})  if (Helpers::Misc::is_active_pid_in_file($opt->{'pid-file'}));
      my $v = undef;
      ($ret, $v) = Helpers::Misc::writeFile($opt->{'pid-file'}, $$ . "\n", { 'mode' => 0600 });
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_FAILED_TO_CREATE_PID_FILE, $opt->{'pid-file'}, $v) if (!$ret);
      $cleanup_vars->{'remove_pidfile'} = $opt->{'pid-file'};
    }

  my $config          = undef;
  my $config_json_ptr = undef;

  if (Helpers::Misc::isEmpty($opt->{'config'})) { $opt->{'config'} = $opt->{'default_config'}; } else { $opt->{'_need-config'} = 1; }
  ($ret, $config_json_ptr) = Helpers::Misc::readFile($opt->{'config'});
  if (!$ret)
    {
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_CONFIG, $opt->{'config'}, $config_json_ptr) if ($opt->{'_need-config'});
      $config_json_ptr = \qq({});
    }
  ($ret, $config) = Helpers::Misc::fromJSON($$config_json_ptr);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_CONFIG_NOT_JSON, $opt->{'config'}, $config) if (!$ret);

  foreach my $f (keys %$opt)
    {
      $config->{$f} = $opt->{$f} if (defined $opt->{$f});
    }

  # finished dealing with a standard config

  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_INSTANCE_ID)     if (Helpers::Misc::isEmpty($config->{'instance-id'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_INVALID_INSTANCE_ID)     if (!Helpers::AWS::isValidEC2InstanceId($config->{'instance-id'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_AWS_EC2_REGION)  if (Helpers::Misc::isEmpty($config->{'region'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_INVALID_REGION)          if (!Helpers::AWS::isValidAWSRegion($config->{'region'}));

  if (!Helpers::Misc::isEmpty($config->{'tag-control-file'}))
    {
      my $errors = 0;
      foreach my $f (qw/tag overwrite mode output-file/)
        {
          $errors++ if (defined $config->{$f});
        }
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MODE_CONFLICT) if ($errors);
    }
  else
    {
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_TAG)    if (Helpers::Misc::isEmpty($config->{'tag'}));
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_OUTPUT) if (Helpers::Misc::isEmpty($config->{'output-file'}));

      $config->{'mode'}       = enforce_valid_mode($config->{'mode'});
      $config->{'mode'}       = AWS_SAVE_EC2_TAGS_DEFAULT_FILE_MODE if (!defined $config->{'mode'});
      $config->{'mode'}       = oct($config->{'mode'});

      $config->{'overwrite'}  = AWS_SAVE_EC2_TAGS_DEFAULT_OVERWRITE if (!defined $config->{'overwrite'});
    }

  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_SLEEP_AT_EXIT_POSITIVE) if (!Helpers::Misc::isUnsignedInteger($opt->{'sleep-at-exit'}));
  if ($opt->{'sleep-at-exit'} != 0)
    {
      my $v = $opt->{'sleep-at-exit'};
      $v = int(rand($v)) if ($opt->{'randomize-sleep-at-exit'});
      $cleanup_vars->{'sleep-at-exit'} = $v;
    }

  # # main tool

  my @all_tags = ();
  if ($config->{'tag-control-file'})
    {
      my $tref = read_control_file($config->{'tag-control-file'});
      @all_tags = @$tref;
    }
  else
    {
      my $tag;
      foreach my $f (qw/tag mode output-file override/) { $tag->{$f} = $config->{$f} };
      push @all_tags, $tag;
    }

  my $cmd = sprintf("aws ec2 describe-tags --region=%s --filter 'Name=resource-id,Values=%s'|",
                     $config->{'region'},
                     $config->{'instance-id'});
  my $dptr = undef;
  ($ret, $dptr) = Helpers::Misc::readFile_new($cmd);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Failed to fetch tags from AWS instance '%s' in region '%s'",
                                                  $config->{'instance-id'},
                                                  $config->{'region'}) if (!$ret);

  Helpers::Misc::display_and_exit( EXIT_FAILURE, "AWS EC2 API returned an invalid response for tags assigned to instance '%s' region '%s'",
                                                  $config->{'instance-id'},
                                                  $config->{'region'}) if (!defined $dptr);

  my $tag_obj = undef;
  ($ret, $tag_obj) = Helpers::Misc::fromJSON($$dptr);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "AWS EC2 API returned a non-JSON for a tag description: %s", $tag_obj) if (!$ret);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "JSON returned by AWS EC2 API does not contain Tags node") if (!defined $tag_obj->{'Tags'});

  my $tags_hash = undef;

  my $value = undef;
  foreach my $this_tag (@{$tag_obj->{'Tags'}})
    {
      $tags_hash->{$this_tag->{'Key'}} = $this_tag->{'Value'};
    }

  my $has_errors = 0;

  foreach my $this_tag (@all_tags)
    {
      next if (!defined $tags_hash->{$this_tag->{'tag'}});

      # we will write if
      # 1) output file does not exists
      # 2) there's an overwrite flag

      my $write_file = 1;

      if (!$this_tag->{'overwrite'} || $this_tag->{'overwrite'} ne "1")
        {
          $write_file = 0 if ( -f $this_tag->{'output-file'});
        }

      next if (!$write_file);

      # write file

      my $value = $tags_hash->{$this_tag->{'tag'}} . "\n";

      my $fname = $this_tag->{'output-file'} . "." . $$;

      my $r = undef;
      ($ret, $r) = Helpers::Misc::writeFile($fname, $value, { 'mode' => $this_tag->{'mode'}});
      if (!$ret)
        {
          $has_errors = 1;
          $logger->log( "Failed to write tag '%s' value into a temporary file '%s': %s",
                        $this_tag->{'tag'},
                        $fname,
                        $r);
        }

      $ret = rename $fname, $this_tag->{'output-file'};
      if (!$ret)
        {
          $has_errors = 1;
          $logger->log( "Failed to rename temporary file '%s' to output file '%s' for tag '%s'",
                        $fname,
                        $config->{'output-file'},
                        $this_tag->{'tag'});
        }

    }

  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Tag processing run for instance %s in region %s has resulted in some errors",
                                                $config->{'instance-id'},
                                                $config->{'region'}) if ($has_errors);
  exit(EXIT_SUCCESS);
}

exit(EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("  --instance-id=<id>             Get tag on AWS instance id <id>\n");
  printf("                                 Default: %s\n", $opt->{'instance-id'});
  printf("  --region=<region>              Get tag on AWS instance in region <region>\n");
  printf("                                 Default: %s\n", $opt->{'region'});
  printf("  --tag-control-file=<tagf>      Use a tag control file <tagf> to process tags\n");
  printf("                                 Default: %s\n", $opt->{'tag-control-file'});
  printf("  --tag=<tag>                    Get tag <tag>\n");
  printf("                                 Default: %s\n", $opt->{'tag'});
  printf("  --output-file=<filename>       Write tag value into file <filename>\n");
  printf("                                 Default: %s\n", $opt->{'output-file'});
  printf("  --mode=<mode>                  Set output <filename> permissions to <mode>\n");
  printf("                                 Default: %s\n", $opt->{'mode'});
  printf("  --overwrite                    Overwrite the output file if it exists\n");
  printf("                                 Default: do not\n");
  printf("  --sleep-at-exit=<sleep-sec>    Sleep for <sleep-sec> before exiting\n");
  printf("                                 Default: %s\n", $opt->{'sleep-at-exit'});
  printf("  --randomize-sleep-at-exit      Randomize sleep at exit delay between its value and 0\n");
  printf("                                 Default: no\n");
  printf("  --log-tag=<tag>                Set the logging tag to <tag>\n");
  printf("                                 Default: %s\n", $opt->{'TOOL_NAME'});
  printf("  --pid-file=<pidfile.pid>       Store the PID in a file <pidfile.pid>\n");
  printf("                                 Default: none\n");
  printf("  --verbose                      Include additional logging\n");
  printf("                                 Default: No\n");
  printf("  --help                         This help.\n\n");
  printf("This tool relies on pre-configured aws utility\n\n");

  exit(EXIT_SUCCESS);

}

END {
  sleep($cleanup_vars->{'sleep-at-exit'}) if (defined $cleanup_vars->{'sleep-at-exit'} && $cleanup_vars->{'sleep-at-exit'} != 0);
  unlink ($cleanup_vars->{'remove_pidfile'}) if (defined $cleanup_vars->{'remove_pidfile'});
}

sub read_control_file {
  my $fname = shift @_;

  my ($ret, $dptr) = Helpers::Misc::readFile($fname);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Error reading file %s : %s", $fname, $dptr) if (!$ret);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "File %s is empty", $fname) if (!defined $dptr);

  my $tags_obj = undef;
  ($ret, $tags_obj) = Helpers::Misc::fromJSON($$dptr);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Content of a file %s is not a valid JSON: %s", $fname, $tags_obj) if (!$ret);

  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s does not have a 'tags' node", $fname) if (!defined $tags_obj->{'tags'});
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tags' node does not point to an array", $fname) if (ref($tags_obj->{'tags'}) ne "ARRAY");

  my $count = 1;
  foreach my $this_tag (@{$tags_obj->{'tags'}})
    {
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tags' node array element is not a hash", $fname) if (ref($this_tag) ne "HASH");

      foreach my $f (qw/tag output-file mode overwrite/)
        {
          Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tags' node array element %s is missing a field '%s'",
                                                        $fname, $count, $f) if (!defined $this_tag->{$f});
        }
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tag' node array element %s field 'tag' has an invalid value '%s'",
                                                    $fname, $count, $this_tag->{'tag'}) if (!isValidTag($this_tag->{'tag'}));
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tag' node array element %s field 'output-file' is empty",
                                                    $fname, $count) if (Helpers::Misc::isEmpty($this_tag->{'output-file'}));
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Control file %s 'tag' node array element %s field 'overwrite' is neither '1' nor '0'",
                                                    $fname, $count) if ($this_tag->{'overwrite'} ne "1" && $this_tag->{'overwrite'} ne "0");

      $this_tag->{'mode'} = enforce_valid_mode($this_tag->{'mode'});
      $this_tag->{'mode'} = AWS_SAVE_EC2_TAGS_DEFAULT_FILE_MODE if (!defined $this_tag->{'mode'});
      $this_tag->{'mode'} = oct($this_tag->{'mode'});

      $count++;
    }

  return $tags_obj->{'tags'};
}


sub isValidTag {
  my $tag = shift @_;

  $tag =~ s/[a-zA-Z0-9]//g;
  $tag =~ s/[-_]//g;

  return 1 if ($tag eq '');
  return 0;
}

sub enforce_valid_mode {
  my $mode = shift @_;

  if (defined $mode)
    {
      my $len = length($mode);
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MODE_NON_OCTAL) if (!Helpers::Misc::isStringOctal($mode) || (($len != 4) && ($len != 5)));
    }
  return $mode;
}
