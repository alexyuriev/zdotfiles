#!/usr/bin/perl

# aws-list-ec2-sec-groups
#
# Extract useful information from aws ec2 describe instances
# Requires configured aws tool
#
# Version 0.0.3

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);

use Helpers::Misc;

{

  my $opt = {
                'TOOL_NAME'             => qq(aws-list-ec2-sec-groups),
                'TOOL_DESC'             => qq(Lists AWS EC2 security groups),
                'TOOL_VER_MAJOR'        => 0,
                'TOOL_VER_MINOR'        => 0,
                'TOOL_VER_PATCH'        => 3,
                'group_id'              => undef,
                'group_name'            => undef,
                'single_security_group' => 0,
                'with_tags'             => 0,
                'sec_fencer'            => 0,
                'help'                  => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};

  my $ret = GetOptions(   "with-tags"     => \$opt->{'with_tags'},
                          "group-id=s"    => \$opt->{'group_id'},
                          "group-name=s"  => \$opt->{'group_name'},
                          "sec-fencer"    => \$opt->{'sec_fencer'},
                          "help"          => \$opt->{'help'}
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);
  Helpers::Misc::display_and_exit(-1, qq(Parameters --group-id and --group-name cannot be used together)) if (!Helpers::Misc::isEmpty($opt->{'group_id'}) && !Helpers::Misc::isEmpty($opt->{'group_name'}));
  $opt->{'single_security_group'} = 1 if (!Helpers::Misc::isEmpty($opt->{'group_id'}) || !Helpers::Misc::isEmpty($opt->{'group_name'}));

  my $sec_groups_list_ptr = undef;
  ($ret, $sec_groups_list_ptr) = Helpers::Misc::readFile("aws ec2 describe-security-groups|");
  Helpers::Misc::display_and_exit(-1, qq(Failed to fetch security groups from AWS: ) . $sec_groups_list_ptr) if (!$ret);

  my $sec_groups_list = undef;
  ($ret, $sec_groups_list) = Helpers::Misc::fromJSON($$sec_groups_list_ptr);
  Helpers::Misc::display_and_exit(-1, qq(AWS security groups do not appear to be a JSON: $sec_groups_list)) if (!$ret);
  Helpers::Misc::display_and_exit(-1, qq(JSON object does not have SecurityGroups array as the top level element)) if (!defined $sec_groups_list->{'SecurityGroups'});

  my @all_security_groups = ();

  foreach my $this_sec_group (@{$sec_groups_list->{'SecurityGroups'}})
    {
      my $this_sg = undef;
      next if (!Helpers::Misc::isEmpty($opt->{'group_id'})   && $opt->{'group_id'} ne $this_sec_group->{'GroupId'});
      next if (!Helpers::Misc::isEmpty($opt->{'group_name'}) && $opt->{'group_name'} ne $this_sec_group->{'GroupName'});

      $this_sg->{'GroupName'} = $this_sec_group->{'GroupName'};
      $this_sg->{'GroupId'}   = $this_sec_group->{'GroupId'};

      my $tags = undef;
      foreach my $this_tag (@{$this_sec_group->{'Tags'}})
        {
          $tags->{$this_tag->{'Key'}} = $this_tag->{'Value'};
        }
      $this_sg->{'Tags'} = $tags if ($opt->{'with_tags'});
      $this_sg->{'SecFencerEnabled'}  = $tags->{'sec_fencer_enabled'}  if (!Helpers::Misc::isEmpty($tags->{'sec_fencer_enabled'}));
      $this_sg->{'SecFencerPolicies'} = $tags->{'sec_fencer_policies'} if (!Helpers::Misc::isEmpty($tags->{'sec_fencer_policies'}));

      my @all_rules = ();
      my @sec_fencer_rules = ();
      foreach my $this_permission (@{$this_sec_group->{'IpPermissions'}})
        {
          my $this_rule = {
                            'Port'      => $this_permission->{'FromPort'},
                            'Protocol'  => $this_permission->{'IpProtocol'},
                          };
          my @all_cidrs = ();
          foreach my $this_cidr (@{$this_permission->{'IpRanges'}})
            {
              #print "inside ranges\n";
              if ($opt->{'sec_fencer'})
                {
                  my $this_fencer_rule = {
                                            'Port'      => $this_rule->{'Port'},
                                            'Protocol'  => $this_rule->{'Protocol'},
                                            'Cidr'      => $this_cidr->{'CidrIp'},
                                          };
                  push @sec_fencer_rules, $this_fencer_rule;
                }
              else
                {
                  push @all_cidrs, $this_cidr->{'CidrIp'};
                }
            }
          if (!$opt->{'sec_fencer'})
            {
              $this_rule->{'AllowFromCidrListIpV4'} = \@all_cidrs if (scalar @all_cidrs);
              push @all_rules, $this_rule;
            }
        }
      if ($opt->{'sec_fencer'})
        {
          $this_sg->{'SecFencerAllowFromCidrIpV4'} = \@sec_fencer_rules if (scalar @sec_fencer_rules);
        }
      else
        {
          $this_sg->{'AllowRules'} = \@all_rules;
        }
      push @all_security_groups, $this_sg;

    }

  if (my $total_sec_groups = scalar @all_security_groups)
    {
      my $resp = undef;
      my $ptr  = \@all_security_groups;
      $ptr = $all_security_groups[0] if ($total_sec_groups == 1 && $opt->{'single_security_group'});
      ($ret, $resp) = Helpers::Misc::toJSON($ptr, { 'pretty' => 1});
      print $resp;
    }
  exit(0);
}

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      --group-id=<id>     Display rule for security group <id>\n");
  printf("                          Default: all known groups\n");
  printf("      --group-name=<name> Display rules for security group <name>\n");
  printf("                          Default: all security groups\n");
  printf("      --with-tags         Include all tags assigned groups\n");
  printf("                          Default: no\n");
  printf("      --sec-fencer        Display result in Sec Fencer format\n");
  printf("                          Default: no\n");
  printf("      --help              This help\n\n");
  printf("This tool relies on pre-configured aws utility\n\n");

  exit(0);

}
