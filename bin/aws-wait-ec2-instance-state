#!/usr/bin/perl

# aws-wait-ec2-instance-state
#
# Waits until AWS EC2 instance reaches a specific state.
# This tool is mostly used as a part of the Security Fencer instance orchestration
# Requires configured aws tool
#
# Version 0.0.6

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);

use Helpers::AWS;
use Helpers::Misc;
use Helpers::Logger;

use constant ERR_MSG_MISSING_INSTANCE_ID    => qq(Need an AWS EC2 instance id);
use constant ERR_MSG_MISSIGN_AWS_AZ         => qq(Need ab AWS EC2 availability zone.);
use constant ERR_MSG_MISSING_AWS_RUN_STATE  => qq(Missing or invalid target AWS run state.);
use constant ERR_MSG_NO_STATE               => qq(Failed to get the state of instance '%s' in AWS zone '%s': %s);
use constant ERR_MSG_INSTANCE_NOT_FOUND     => qq(Instance '%s' in the AWS region '%s' cannot be found);
use constant MSG_INSTANCE_STATE_RESULT      => qq(Instance '%s' in the AWS region '%s' %s reached state '%s');
use constant MSG_WRONG_INSTANCE_STATE_RETRY => qq(Instance '%s' in the AWS region '%s' has a run state '%s' instead of '%s' - retry number %s in %s seconds);

use constant CMD_AWS_EC2_GET_INSTANCE       => qq(aws-list-ec2-instances --instance-id=%s --region=%s |);

our $logger = undef;

use constant EXIT_FAILURE => 1;
use constant EXIT_SUCCESS => 0;

{

  my $opt = {
                'TOOL_NAME'             => qq(aws-wait-ec2-instance-state),
                'TOOL_DESC'             => qq(Waits until AWS instance readches a specific run state),
                'TOOL_VER_MAJOR'        => 0,
                'TOOL_VER_MINOR'        => 0,
                'TOOL_VER_PATCH'        => 6,
                'instance_id'           => undef,
                'region'                => undef,
                'exit_state'            => undef,
                'polling_delay'         => 5,
                'max_tries'             => 1000,
                'check-presence-max-tries'    => 5,
                'check-presence-tries-delay'  => 30,
                'verbose'               => 0,
                'stdout_json'           => 0,
                'help'                  => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};

  my $ret = GetOptions(   "instance-id=s"           => \$opt->{'instance_id'},
                          "region=s"                => \$opt->{'region'},
                          "check-presence-max-tries=s" => \$opt->{'check-presence-max-tries'},
                          "presence-tries-delay=s"  => \$opt->{'presence-tries-delay'},
                          "exit-state=s"            => \$opt->{'exit_state'},
                          "polling-delay=i"         => \$opt->{'polling_delay'},
                          "max-tries=s"             => \$opt->{'max_tries'},
                          "verbose"                 => \$opt->{'verbose'},
                          "stdout-json"             => \$opt->{'stdout_json'},
                          "help"                    => \$opt->{'help'},
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);

  my $loggerConfig =  {
                          'ident' => $opt->{'TOOL_NAME'},
                          'loggers' => {
                                          'stdout' => 0,
                                          'stderr' => 1,
                                       },
                      };
  $loggerConfig->{'loggers'}->{'stdout_json'} = 1 if ($opt->{'stdout_json'});
  $logger = Helpers::Logger->new($loggerConfig);

  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MSG_MISSING_INSTANCE_ID)   if (Helpers::Misc::isEmpty($opt->{'instance_id'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MSG_MISSIGN_AWS_AZ)        if (!Helpers::AWS::isValidAWSRegion($opt->{'region'}));
  Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MSG_MISSING_AWS_RUN_STATE) if (!Helpers::AWS::isValidEC2InstanceRunState($opt->{'exit_state'}));

  my $cmd = sprintf(CMD_AWS_EC2_GET_INSTANCE, $opt->{'instance_id'}, $opt->{'region'});

  my $run_state = qq(unknown);
  my $state_reached = 0;
  my $instance_seen = 0;
  my $presence_locate_attempt = 1;
  for ( my $try_number = 0; $try_number < $opt->{'max_tries'}; $try_number++)
    {
      my ($ret, $json_ptr) = Helpers::Misc::readFile($cmd);
      if ($ret)
        {
          # instance not found handling
          #
          # Sometimes there's a strange condition when AWS API will not find a just launched instance
          # even though it has returned the instance id. The instance will appear after some delay
          # presence_locate_attempt and opt->check-presence-tries, opt->check-presence-tries-delay
          # is handling of this condition

          if (defined $json_ptr && $$json_ptr eq qq({}))
            {
              $presence_locate_attempt++;

              Helpers::Misc::display_and_exit(EXIT_FAILURE, ERR_MSG_INSTANCE_NOT_FOUND, $opt->{'instance_id'}, $opt->{'region'}) if ($instance_seen);
              if ($presence_locate_attempt <= $opt->{'check-presence-max-tries'})
                {
                  $logger->log_no_stdout("Unable to locate instance %s in region %s. Triggering presence-locate retry %s of %s after %s seconds",
                                          $opt->{'instnace_id'}, $opt->{'region'},
                                          $presence_locate_attempt,
                                          $opt->{'check-presence-max-tries'},
                                          $opt->{'check-presence-tries-delay'});
                  sleep($opt->{'check-presence-tries-delay'});
                  next;
                }
              Helpers::Misc::display_and_exit(EXIT_FAILURE, "Failed to locate instance %s in region %s after exhausing all %s check placement attempts",
                                                            $opt->{'instnace_id'},
                                                            $opt->{'region'},
                                                            $opt->{'check-presence-max-tries'});
            }

          $instance_seen = 1;
          my $state = undef;
          ($ret, $state) = Helpers::Misc::fromJSON($$json_ptr);
          if (!$ret)
            {
              $logger->log_no_stdout(ERR_MSG_NO_STATE, $opt->{'instance_id'}, $opt->{'region'}, $state);
            }
          else
            {
              $run_state = $state->{'RunState'};
              if ($state->{'RunState'} eq $opt->{'exit_state'})
                {
                  $state_reached = 1;
                  last;
                }
              if ($state->{'RunState'} eq qq(terminated))
                {
                  $state_reached = 0;
                  last;
                }
            }
        }
      else
        {
          $logger->log_no_stdout(ERR_MSG_NO_STATE, $opt->{'instance_id'}, $opt->{'region'}, $json_ptr);
        }
      $logger->log_no_stdout( MSG_WRONG_INSTANCE_STATE_RETRY,
                              $opt->{'instance_id'},
                              $opt->{'region'},
                              $run_state,
                              $opt->{'exit_state'},
                              $try_number + 1,
                              $opt->{'polling_delay'});
      sleep($opt->{'polling_delay'});
    }

  my $status_txt = undef;
  my $exit_code  = undef;
  {
    my $t = {
              1 =>  {
                      "status_txt"  => "has",
                      "exit_code"   => EXIT_SUCCESS,
                    },
              0 =>  {
                      "status_txt"  => "has not",
                      "exit_code"   => EXIT_FAILURE,
                    }
            };
    $status_txt = $t->{$state_reached}->{'status_txt'};
    $exit_code  = $t->{$state_reached}->{'exit_code'};
  }

  my $status_msg = sprintf(MSG_INSTANCE_STATE_RESULT, $opt->{'instance_id'}, $opt->{'region'}, $status_txt, $opt->{'exit_state'});
  Helpers::Misc::display_and_exit($exit_code, $status_msg);

}

exit(EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      --instance-id=<id>                       Wait for instance with instance id <id>\n");
  printf("                                               Default: %s\n", $opt->{'instance_id'});
  printf("      --region=<region>                        Wait for instance in region <region>\n");
  printf("                                               Default: %s\n", $opt->{'region'});
  printf("      --exit-state=<state>                     Wait until instance reaches state <state>\n");
  printf("                                               Default: %s\n", $opt->{'exit_state'});
  printf("      --polling-delay=<s>                      Wait for <s> seconds between polling AWS API\n");
  printf("                                               Default: %s\n", $opt->{'polling_delay'});
  printf("      --max-tries=<count>                      At most do <count> retries\n");
  printf("                                               Default: %s\n", $opt->{'max_tries'});
  printf("      --check-presence-max-tries=<max-checks>  If the instance is not found, try <max-checks> times to \n");
  printf("                                               locate it after <delay-s> delay\n");
  printf("                                               Default: %s\n", $opt->{'presence-tries>'});
  printf("      --check-presence-tries-delay=<delay-s>   Define a number of delay seconds <delay-s>\n");
  printf("                                               Default: %s\n", $opt->{'presence-tries-delay'});
  printf("      --stdout-json                            Make stdout status messageing to be a control JSON\n");
  printf("                                               Default: No\n");
  printf("      --help                                   This help\n\n");
  printf("This tool relies on pre-configured aws utility. It exists with code 0 if the state\n");
  printf("is reached and 1 if the state is not reached\n\n");

  exit(EXIT_SUCCESS);
}

