#!/usr/bin/perl

# aws-set-ec2-tags
#
# Sets AWS EC2 tags
# Requires configured aws tool
#
# Version 0.0.3

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);
use Helpers::Logger;
use Helpers::AWS;
use Helpers::Misc;

use constant EXIT_SUCCESS => 0;
use constant EXIT_FAILURE => 1;

use constant ERR_MSG_MISSING_INSTANCE_ID      => qq(AWS instance ID is missing);
use constant ERR_MSG_INVALID_REGION           => qq(Must provide a valid AWS EC2 region);
use constant ERR_MSG_MISSING_AWS_EC2_REGION   => qq(AWS EC2 region name is missing);
use constant ERR_MSG_INVALID_INSTANCE_ID      => qq(Must provide a valid AWS EC2 instance id);
use constant ERR_MSG_MISSING_TAG              => qq(Need provide a name of the tag to set);
use constant ERR_MSG_MISSING_VALUE            => qq(Must provide a value to set the tag to);
use constant ERR_MSG_SET_TAG_FAILED           => qq(Failed to set a tag %s to value %s on AWS EC2 instance %s in region %s);
use constant MSG_TAG_SET                      => qq(Successfully set tag '%s' to value '%s' on AWS EC2 instance '%s' in region '%s');

our $logger = undef;

{

  my $opt = {
                'TOOL_NAME'       => qq(aws-set-ec2-tags),
                'TOOL_DESC'       => qq(Sets tags on AWS EC2 instance),
                'TOOL_VER_MAJOR'  => 0,
                'TOOL_VER_MINOR'  => 0,
                'TOOL_VER_PATCH'  => 3,
                'tag'             => undef,
                'value'           => undef,
                'instance_id'     => undef,
                'region'          => undef,
                'help'            => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};

  my $ret = GetOptions(   "tag=s"             => \$opt->{'tag'},
                          "value=s"           => \$opt->{'value'},
                          "region=s"          => \$opt->{'region'},
                          "instance-id=s"     => \$opt->{'instance_id'},
                          "help"              => \$opt->{'help'}
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);

  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_INSTANCE_ID)     if (Helpers::Misc::isEmpty($opt->{'instance_id'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_INVALID_INSTANCE_ID)     if (!Helpers::AWS::isValidEC2InstanceId($opt->{'instance_id'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_AWS_EC2_REGION)  if (Helpers::Misc::isEmpty($opt->{'region'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_INVALID_REGION)          if (!Helpers::AWS::isValidAWSRegion($opt->{'region'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_TAG)             if (Helpers::Misc::isEmpty($opt->{'tag'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_VALUE)           if (Helpers::Misc::isEmpty($opt->{'value'}));

  my $loggerConfig =  {
                          'ident' => $opt->{'TOOL_NAME'},
                          'loggers' => {
                                          'syslog' => { 'facility' => qq(user) },
                                          'stdout' => 0,
                                          'stderr' => 1,
                                       },
                      };

  $loggerConfig->{'loggers'}->{'stdout_json'} = 1 if ($opt->{'stdout_json'});
  $logger = Helpers::Logger->new($loggerConfig);

  my $cmd = sprintf("aws ec2 create-tags --region %s --resource=%s --tags Key=%s,Value='%s'", $opt->{'region'}, $opt->{'instance_id'}, $opt->{'tag'}, $opt->{'value'});
  $ret = system($cmd);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_SET_TAG_FAILED, $opt->{'tag'}, $opt->{'value'}, $opt->{'instance_id'}, $opt->{'region'}) if ($ret != 0);
  Helpers::Misc::display_and_exit( EXIT_SUCCESS, MSG_TAG_SET, $opt->{'tag'}, $opt->{'value'}, $opt->{'instance_id'}, $opt->{'region'});
}

exit(EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      --instance-id=<id>     Set tag on AWS instance id <id>\n");
  printf("                             Default: %s\n", $opt->{'instance_id'});
  printf("      --region=<region>      Set tag on AWS instance in region <region>\n");
  printf("                             Default: %s\n", $opt->{'region'});
  printf("      --tag=<tag>            Set tag <tag>\n");
  printf("                             Default: %s\n", $opt->{'tag'});
  printf("      --value=<value>        Set tag to value <value>\n");
  printf("                             Default: %s\n", $opt->{'value'});
  printf("      --help                 This help\n\n");
  printf("This tool relies on pre-configured aws utility\n\n");

  exit(EXIT_SUCCESS);

}
