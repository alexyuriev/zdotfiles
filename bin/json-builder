#!/usr/bin/perl

# json-builder
#
# builds json from command line
#
# Version 0.0.1

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use File::Path;
use File::stat;
use Cwd;
use Time::localtime;
use DateTime;
use POSIX qw(strftime);

use Getopt::Long qw(:config no_auto_abbrev);
use Helpers::Logger;
use Helpers::Misc;

use constant EXIT_FAILURE => 1;
use constant EXIT_SUCCESS => 0;

use constant ERR_MSG_MISSING_CONFIG             => qq(Unable to read configuratin file %s : %s);
use constant ERR_MSG_CONFIG_NOT_JSON            => qq(Configuration file %s does not appear to be a JSON: %s);

{
  my $opt = {
                'TOOL_NAME'                 => qq(json-builder),
                'TOOL_DESC'                 => qq(Syncs a git repo and runs a command),
                'TOOL_VER_MAJOR'            => 0,
                'TOOL_VER_MINOR'            => 0,
                'TOOL_VER_PATCH'            => 1,

                'help'                      => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};
  $opt->{'tmpdir'} = sprintf("/tmp/%s", $opt->{'TOOL_NAME'});
  $opt->{'default_config'} = sprintf("%s/.config/config-%s.json", Helpers::Misc::get_users_home_dir(), $opt->{'TOOL_NAME'});

  my $ret = GetOptions(
                          "verbose"               => \$opt->{'verbose'},
                          "help"                  => \$opt->{'help'},
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret || scalar @ARGV == 0);

  my $obj = undef;

  foreach my $this_pair (@ARGV)
    {
      my ($key, $value) = split('=', $this_pair);
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "%s does not have valid key on the left", $this_pair) if (Helpers::Misc::isEmpty($key));
      $obj->{$key} = $value;
    }

  my $json_txt = Helpers::Misc::toJSON($obj, { 'pretty' => 1, 'canonical' => 1 });
  printf("%s\n", $json_txt);
  exit ( EXIT_SUCCESS );

}

exit( EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      <key=value>                     repeated any number of times\n\n");
  printf("      --help                          This help\n");

  exit( EXIT_SUCCESS );
}
