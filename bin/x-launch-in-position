#!/usr/bin/perl
#
# x-launch-in-position
#
# Launches x application in a specific window position
#
# version 0.0.2

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);

use Helpers::Misc;
use Helpers::Logger;

use constant EXIT_FAILURE => 1;
use constant EXIT_SUCCESS => 0;

use constant ERR_MSG_MISSING_CONFIG             => qq(Unable to read configuratin file %s : %s);
use constant ERR_MSG_CONFIG_NOT_JSON            => qq(Configuration file %s does not appear to be a JSON: %s);

use constant ERR_MSG_MISSING_CONFIG             => qq(Unable to read configuratin file %s : %s);
use constant ERR_MSG_EMPTY_CONFIG               => qq(Configuration file %s seems to be empty);
use constant ERR_MSG_CONFIG_NOT_JSON            => qq(Configuration file %s does not appear to be a JSON: %s);
use constant ERR_MSG_CONFIG_MISSING_NODE        => qq(Configuration file %s is missing a node %s);
use constant ERR_MSG_CONFIG_MISSING_FIELD       => qq(Configuration file %s is missing field %s in node %s);
use constant ERR_MSG_FAILED_TO_CREATE_PID_FILE  => qq(Failed to create PID file %s);
use constant ERR_MSG_SLEEP_AT_EXIT_POSITIVE     => qq(Sleep-at-exit parameter must be a positive integer);

our $logger = undef;
our $cleanup_vars = undef;

$SIG{CHLD} = sub {
  while ()
    {
      my $child = waitpid -1, POSIX::WNOHANG;
      last if $child <= 0;
    }
};

{

  my $opt = {
              'TOOL_NAME'               => qq(x-launch-in-position),
              'TOOL_DESC'               => qq(Places newly launched X application in a specific postion),
              'TOOL_VER_MAJOR'          => 0,
              'TOOL_VER_MINOR'          => 0,
              'TOOL_VER_PATCH'          => 2,

              'desktop'                 => undef,
              'pos-x'                   => undef,
              'pos-y'                   => undef,
              'size-x'                  => undef,
              'size-y'                  => undef,
              'max-attempts'            => 5,
              'try-delay'               => 1,

              '_need-config'            => 0,
              'sleep-at-exit'           => 0,
              'pid-file'                => undef,
              'log-tag'                 => undef,
              'verbose'                 => 1,
              'randomize-sleep-at-exit' => 0,
              'help'                    => 0
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};
  $opt->{'default_config'} = sprintf("%s/.config/config-%s.json", Helpers::Misc::get_users_home_dir(), $opt->{'TOOL_NAME'});

  my $ret = GetOptions( "desktop=s"             => \$opt->{'desktop'},
                        "pos-x=s"               => \$opt->{'pos-x'},
                        "pos-y=s"               => \$opt->{'pos-y'},
                        "size-x=s"              => \$opt->{'size-x'},
                        "size-y=s"              => \$opt->{'size-y'},
                        "max-attempts=s"        => \$opt->{'max-attempts'},
                        "try-delay=s"           => \$opt->{'try-delay'},

                        "log-tag=s"               => \$opt->{'log-tag'},
                        "pid-file=s"              => \$opt->{'pid-file'},
                        "verbose"                 => \$opt->{'verbose'},
                        "sleep-at-exit=s"         => \$opt->{'sleep-at-exit'},
                        "randomize-sleep-at-exit" => \$opt->{'randomize-sleep-at-exit'},
                        "help"                    => \$opt->{'help'}
                  );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);

  my $loggerConfig =  {
                        'ident' => $opt->{'TOOL_NAME'},
                        'loggers' => { 'stdout' => 0, 'stderr' => 1, 'syslog' => { 'facility' => 'user' } },
                      };
  $loggerConfig->{'ident'} = $opt->{'log-tag'} if (!Helpers::Misc::isEmpty($opt->{'log-tag'}));
  $logger = Helpers::Logger->new($loggerConfig);

  # handle pid file

  if (!Helpers::Misc::isEmpty($opt->{'pid-file'}))
    {
      $logger->log("PID file is %s", $opt->{'pid-file'});
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "File %s exists and only one %s can run at a time", $opt->{'pid-file'}, $opt->{'TOOL_NAME'})  if (Helpers::Misc::is_active_pid_in_file($opt->{'pid-file'}));
      my $v = undef;
      ($ret, $v) = Helpers::Misc::writeFile($opt->{'pid-file'}, $$ . "\n", { 'mode' => 0600 });
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_FAILED_TO_CREATE_PID_FILE, $opt->{'pid-file'}, $v) if (!$ret);
      $cleanup_vars->{'remove_pidfile'} = $opt->{'pid-file'};
    }

  # handle config file processing. $opt->_need-config establishes if the configuraiton file must be present

  my $config          = undef;
  my $config_json_ptr = undef;

  if (Helpers::Misc::isEmpty($opt->{'config'})) { $opt->{'config'} = $opt->{'default_config'}; } else { $opt->{'_need-config'} = 1; }
  ($ret, $config_json_ptr) = Helpers::Misc::readFile($opt->{'config'});
  if (!$ret)
    {
      Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_MISSING_CONFIG, $opt->{'config'}, $config_json_ptr) if ($opt->{'_need-config'});
      $config_json_ptr = \qq({});
    }
  ($ret, $config) = Helpers::Misc::fromJSON($$config_json_ptr);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_CONFIG_NOT_JSON, $opt->{'config'}, $config) if (!$ret);

  # finished dealing with a standard config

  foreach my $f (keys %$opt)
    {
      $config->{$f} = $opt->{$f} if (defined $opt->{$f});
    }

  Helpers::Misc::display_and_exit( EXIT_FAILURE, ERR_MSG_SLEEP_AT_EXIT_POSITIVE) if (!Helpers::Misc::isUnsignedInteger($opt->{'sleep-at-exit'}));
  if ($opt->{'sleep-at-exit'} != 0)
    {
      my $v = $opt->{'sleep-at-exit'};
      $v = int(rand($v)) if ($opt->{'randomize-sleep-at-exit'});
      $cleanup_vars->{'sleep-at-exit'} = $v;
    }

  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Desktop id must be a number") if (defined $config->{'desktop'} && !Helpers::Misc::isUnsignedInteger($config->{'desktop'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Maximum number of attempts must be a positive integer") if (!Helpers::Misc::isPositiveInteger($config->{'max-attempts'}));
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Retry delay must be a non-negative integer") if (!Helpers::Misc::isUnsignedInteger($config->{'try-delay'}));

    {
      my $t = {
                "pos-x"   => "Window position x",
                "pos-y"   => "Window position y",
                "size-x"  => "Window size x",
                "size-y"  => "Window size y"
              };
      foreach my $f ( keys %$t)
        {
          Helpers::Misc::display_and_exit( EXIT_FAILURE, "%s must be an unsigned integer") if (!Helpers::Misc::isUnsignedInteger($config->{$f}));
        }
    }

  my $launch_cmd = join (' ', @ARGV);
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Nothing to launch") if (Helpers::Misc::isEmpty($launch_cmd));

  my $pid = fork();
  Helpers::Misc::display_and_exit( EXIT_FAILURE, "Failed to prepare for a lauch of %s", $launch_cmd) if ($pid < 0);
  if ($pid == 0)
    {
      no warnings;
      $0 = $launch_cmd;
      exec($launch_cmd);
      use warnings;
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Reached an unreachable code chunk. Aborting.");
    }

  my $win_id = undef;
  ($ret, $win_id) = get_window_id_by_pid($pid, $config);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Failed to get X window id for pid %s: %s", $win_id) if (!$ret);

  if (defined $config->{'desktop'})
    {
      my $cmd = sprintf("wmctrl -i -r %s -t %s", $win_id, $config->{'desktop'});
      $ret = system($cmd);
      Helpers::Misc::display_and_exit(EXIT_FAILURE, "Failed to switch to a defined desktop %s", $config->{'desktop'}) if ($ret != 0);
    }

  my $cmd = sprintf("wmctrl -i -r %s -e 0,%s,%s,%s,%s", $win_id, $config->{'pos-x'}, $config->{'pos-y'}, $config->{'size-x'}, $config->{'size-y'});

  $ret = system($cmd);
  Helpers::Misc::display_and_exit(EXIT_FAILURE, "Failed to reposition window %s for pid %s", $win_id, $pid) if ($ret != 0);

  exit(EXIT_SUCCESS);
}

exit(EXIT_FAILURE);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("  --desktop=<id>                   Position window on a desktop with id <id>\n");
  printf("                                   Default: current desktop\n");
  printf("  --pos-x=<pos-x>                  x coordinate of the top left corner of a window\n");
  printf("                                   Default: %s\n", $opt->{'pos-x'});
  printf("  --pos-y=<pos-y>                  y coordinate of the top left corner of a window\n");
  printf("                                   Default: %s\n", $opt->{'pos-y'});
  printf("  --size-x=<size-x>                Horizontal length of a window\n");
  printf("                                   Default: %s\n", $opt->{'size-x'});
  printf("  --size-y=<size-y>                Vertical height of a window\n");
  printf("                                   Default: %s\n", $opt->{'size-y'});
  printf("  --max-attempts=<max>             Attempt to acquire window id at most <max> times\n");
  printf("                                   Default: %s\n", $opt->{'max-attempts'});
  printf("  --try-delay=<s>                  Delay retries to acquire window id by <s> seconds\n");
  printf("                                   Default: %s\n", $opt->{'try-delay'});
  printf("  --sleep-at-exit=<sleep-sec>      Sleep for <sleep-sec> before exiting\n");
  printf("                                   Default: %s\n", $opt->{'sleep-at-exit'});
  printf("  --randomize-sleep-at-exit        Randomize sleep at exit delay between its value and 0\n");
  printf("                                   Default: no\n");
  printf("  --log-tag=<tag>                  Set the logging tag to <tag>\n");
  printf("                                   Default: %s\n", $opt->{'TOOL_NAME'});
  printf("  --pid-file=<pidfile.pid>         Store the PID in a file <pidfile.pid>\n");
  printf("                                   Default: none\n");
  printf("  --verbose                        Include additional logging\n");
  printf("                                   Default: No\n");
  printf("  --help                           This help.\n\n");

  exit(EXIT_FAILURE);
}

END {
  sleep($cleanup_vars->{'sleep-at-exit'}) if (defined $cleanup_vars->{'sleep-at-exit'} && $cleanup_vars->{'sleep-at-exit'} != 0);
  unlink ($cleanup_vars->{'remove_pidfile'}) if (defined $cleanup_vars->{'remove_pidfile'});
}

sub get_window_id_by_pid
{
  my $pid = shift @_;
  my $opt = shift @_;

  my $ret = undef;

  my $win_id = undef;

  my $attempt = 1;
  my $dptr = undef;
  while ($attempt < $opt->{'max-attempts'})
    {
      ($ret, $dptr) = Helpers::Misc::readFile("wmctrl -lp|");
      if ($ret && $$dptr ne '')
        {
          my @lines = split('\n', $$dptr);
          foreach my $this_line (@lines)
            {
              $this_line = Helpers::Misc::collapse_spaces($this_line);
              my ($wid, $did, $wpid, $junk) = split(' ', $this_line);
              next if ($wpid ne $pid);
              $win_id = $wid;
            }
        }
      last if (defined $win_id);
      sleep($opt->{'try-delay'});
      $attempt++;
    }
  return (0, "wmctrl failed to obtain a window id. Max retries exceeded.") if (!defined $dptr || $$dptr eq '');
  return (1, $win_id);

}
