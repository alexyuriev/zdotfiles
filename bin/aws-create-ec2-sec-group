#!/usr/bin/perl

# aws-create-ec2-sec-groups
#
# Creates AWS EC2 security group
# Requires configured aws tool
#
# Version 0.0.3

use strict;
use warnings;

BEGIN
{
  use File::Spec;
  use File::Basename qw[];
  use Cwd 'abs_path';

  my $APP_BINPATH = File::Basename::dirname( abs_path( $0 ) );
  unshift(@INC, $APP_BINPATH);

  my @list = File::Spec->splitdir($APP_BINPATH);
  pop @list;
  push @list, qq(lib);

  my $APP_LIBPATH = join('/', @list);
  unshift(@INC, $APP_LIBPATH);
  push @INC, $APP_BINPATH . qq(/lib);
  undef $APP_LIBPATH;
  undef $APP_BINPATH;
}

use Getopt::Long qw(:config no_auto_abbrev);

use Helpers::Logger;
use Helpers::AWS;
use Helpers::Misc;

our $logger = undef;

{

  my $opt = {
                'TOOL_NAME'       => qq(aws-create-ec2-sec-group),
                'TOOL_DESC'       => qq(Creates an AWS EC2 security group),
                'TOOL_VER_MAJOR'  => 0,
                'TOOL_VER_MINOR'  => 0,
                'TOOL_VER_PATCH'  => 3,
                'region'          => undef,
                'description'     => undef,
                'group_name'      => undef,
                'help'            => 0,
            };

  $opt->{'TOOL_FULL_ID'} = $opt->{'TOOL_NAME'} . qq( ver ) . $opt->{'TOOL_VER_MAJOR'} . qq(.) . $opt->{'TOOL_VER_MINOR'} . qq(.) . $opt->{'TOOL_VER_PATCH'};

  my $ret = GetOptions(   "group-name=s"  => \$opt->{'group_name'},
                          "description=s" => \$opt->{'description'},
                          "region=s"      => \$opt->{'region'},
                          "help"          => \$opt->{'help'}
                      );

  display_help_and_exit($opt) if ($opt->{'help'} || !$ret);
  Helpers::Misc::display_and_exit(-1, qq(Must provide a security group name)) if (Helpers::Misc::isEmpty($opt->{'group_name'}));
  Helpers::Misc::display_and_exit(-1, qq(Must provide a description))         if (Helpers::Misc::isEmpty($opt->{'description'}));
  Helpers::Misc::display_and_exit(-1, qq(Need a valid AWS region))            if (!Helpers::AWS::isValidAWSRegion($opt->{'region'}));

  my $loggerConfig =  {
                          'ident'   => $opt->{'TOOL_NAME'},
                          'loggers' => {
                                          'syslog' => { 'facility' => qq(user) },
                                          'stdout' => 0,
                                          'stderr' => 1,
                                       },
                      };

  $logger = Helpers::Logger->new($loggerConfig);

  my $response_ptr = undef;
  ($ret, $response_ptr) = Helpers::Misc::readFile(sprintf("aws-list-ec2-sec-groups --region=%s |", $opt->{'region'}));
  Helpers::Misc::display_and_exit(-1, qq(Failed to get crunched security groups from aws: ) . $response_ptr) if (!$ret);

  my $sec_groups_list = undef;
  ($ret, $sec_groups_list) = Helpers::Misc::fromJSON($$response_ptr);
  Helpers::Misc::display_and_exit(-1, qq(AWS security groups do not appear to be a JSON: $sec_groups_list)) if (!$ret);

  foreach my $this_sec_group (@$sec_groups_list)
    {
      next if (Helpers::Misc::isEmpty($this_sec_group->{'GroupName'}));
      next if ($this_sec_group->{'GroupName'} ne $opt->{'group_name'});

      Helpers::Misc::display_and_exit(-1, qq(Security group ) . $opt->{'group_name'} . qq( alraedy exists));
    }

  my $cmd = sprintf("aws ec2 create-security-group --region %s --group-name %s --description '%s'|",
                    $opt->{'region'},
                    $opt->{'group_name'},
                    $opt->{'description'});

  ($ret, $response_ptr) = Helpers::Misc::readFile($cmd);
  Helpers::Misc::display_and_exit(-1, qq(Failed to create a security group ) . $opt->{'group_name'} . qq(:) . $response_ptr) if (!$ret);

  my $response = undef;
  ($ret, $response) = Helpers::Misc::fromJSON($$response_ptr);
  Helpers::Misc::display_and_exit(-1, qq(Response of create security group command does not seem to be a JSON: ) . $response) if (!$ret);
  Helpers::Misc::display_and_exit(-1, qq(Response of create security group command did not return a group id)) if (Helpers::Misc::isEmpty($response->{'GroupId'}));
  print $$response_ptr;

  exit(0);
}

exit(0);

sub display_help_and_exit
{
  my $opt = shift @_;

  foreach my $k ( keys %$opt) { $opt->{$k} = qq(undefined) if (Helpers::Misc::isEmpty($opt->{$k})); }

  printf("\n%s - %s\n\n", $opt->{'TOOL_FULL_ID'}, $opt->{"TOOL_DESC"});
  printf("Options:\n\n");
  printf("      --group-name=<name>   Create security group <name>\n");
  printf("                            Default: %s\n", $opt->{'group_name'});
  printf("      --description=<desc>  Description of the AWS security group\n");
  printf("                            Default: %s\n", $opt->{'description'});
  printf("      --region=<region>     Create security group in AWS region <region>\n");
  printf("                            Default: %s\n", $opt->{'region'});
  printf("      --help                This help\n\n");
  printf("This tool relies on pre-configured aws utility\n\n");

  exit(0);

}
